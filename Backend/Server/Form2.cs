using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Server {
    public partial class Form2 : Form {

        //Need list of connections to maintain clickable gridview
        private List<Connection> ConnectionsInGrid = new List<Connection>();

        //Run form with all autogenerated code
        public Form2() {
            InitializeComponent();
        }

        //Add any connection to datagrid or update an existing one. Will update view if relevant
        public void AddToDataGrid(Connection connection) {

            //Bool to keep track of whether a connection was inserted or updated
            bool inserted = false;

            //Check rows in datagrid and update connection if a match is found
            for (int i = 0; i < dataGridView.Rows.Count; i++) {
                if (dataGridView.Rows[i].Cells[0].Value.Equals(connection.GetId())) {
                    ConnectionsInGrid[i].Update(connection.GetSignalStrength(), connection.GetPackageStatus());
                    connection = ConnectionsInGrid[i];
                    inserted = true;

                    //If the updated element is also the selected (viewed) element, update display for user
                    if (dataGridView.CurrentRow.Cells[0].Value.Equals(connection.GetId())) {
                        UpdateDisplay(connection);
                    }
                }
            }

            //Add new connection to datagrid if not found
            if (!inserted) {
                this.dataGridView.Rows.Add(connection.GetId(), Id);
                ConnectionsInGrid.Add(connection);
                dataGridView.Refresh();
            }
        }

        private void UpdateDisplay(Connection connection) {

            trackBar1.Value = connection.GetSignalStrength();
            progressBar1.Value = connection.GetPackageStatus();
            label4.Text = connection.GetTimeSinceConnection();
            RedrawGraph(connection.GetSignalHistory());
        }

        //Clears all points from graphs, and uses all points from a connection to redraw it
        private void RedrawGraph(List<Point> points) {
            chart1.Series["Signal"].Points.Clear();

            foreach (Point p in points) {
                chart1.Series["Signal"].Points.AddXY(p.X, p.Y);
            }
            chart1.Refresh();
        }

        //Put testdata into datagrid
        public void InitializeTestData(List<Connection> connections) {

            foreach (Connection c in connections) {
                AddToDataGrid(c);
            }
        }

        //Run live test data. BeginInvoke updates other thread
        public void RunTestData() {

            Random rnd = new Random();
            bool packagearrived = false;
            for (int i = 0; i < 100000; i++) {

                packagearrived = false;
                
                System.Threading.Thread.Sleep(5000);

                int randomStrength = rnd.Next(0, 31);
                int randomArrived = rnd.Next(0, 100);



                if (randomArrived > 20) {
                    packagearrived = true;
                } else {
                    packagearrived = false;
                    }


                if (packagearrived) {
                    this.BeginInvoke((MethodInvoker)delegate {
                        AddToDataGrid(new Connection(3456, randomStrength));
                    });

                } else {
                    this.BeginInvoke((MethodInvoker)delegate {

                        foreach (Connection c in ConnectionsInGrid) {
                            if (c.GetId().Equals(3456)) {
                                c.UpdateDisconnected();
                                AddToDataGrid(c);
                            }
                        }
                    });
                }
            }
        }
    }
}
